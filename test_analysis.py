#!/usr/bin/env python3
"""
Analiz s√ºrecini test eden ve detaylƒ± sonu√ß g√∂steren script
"""
import asyncio
import sys
import os
sys.path.insert(0, '/app/backend')

from cmc_client import CMCClient
from feature_store import build_features_from_quote
from model_stub import predict_signal_from_features
from data_sync import read_config
import aiohttp

async def test_analysis():
    print("\n" + "="*60)
    print("üìä MM TRADING BOT PRO - ANALƒ∞Z TEST")
    print("="*60 + "\n")
    
    cfg = read_config()
    api_key = cfg.get("cmc_api_key") or os.getenv("CMC_API_KEY")
    selected_coins = cfg.get("selected_coins", [])
    threshold = cfg.get("threshold", 75)
    
    if not api_key:
        print("‚ùå API Key bulunamadƒ±!")
        return
    
    print(f"üéØ Threshold: {threshold}%")
    print(f"ü™ô Se√ßili Coinler: {', '.join(selected_coins)}")
    print(f"üîë API Key uzunluƒüu: {len(api_key)} karakter")
    print("\n" + "-"*60 + "\n")
    
    async with aiohttp.ClientSession() as session:
        cmc = CMCClient(api_key)
        
        for coin in selected_coins[:5]:  # ƒ∞lk 5 coin
            try:
                print(f"üîç {coin} analiz ediliyor...")
                
                # Veri √ßekme
                quote = await cmc.get_quote(session, coin)
                features = build_features_from_quote(quote)
                
                # Fiyat bilgileri
                price = features.get('price', 0)
                change_1h = features.get('percent_change_1h', 0)
                change_24h = features.get('percent_change_24h', 0)
                
                print(f"   üí∞ Fiyat: ${price:,.2f}")
                print(f"   üìà 1h Deƒüi≈üim: {change_1h:+.2f}%")
                print(f"   üìä 24h Deƒüi≈üim: {change_24h:+.2f}%")
                
                # Sinyal √ºretimi
                timeframe = cfg.get("timeframe", "24h")
                signal_type, probability, tp, sl, weight_desc = predict_signal_from_features(features, timeframe)
                
                print(f"   üéØ Skor: {probability:.2f}%")
                
                if signal_type and probability >= threshold:
                    print(f"   ‚úÖ Sƒ∞NYAL: {signal_type} (G√ºvenilirlik: {probability:.2f}%)")
                    if tp and sl:
                        if signal_type == "LONG":
                            profit = ((tp - price) / price) * 100
                            loss = ((price - sl) / price) * 100
                        else:
                            profit = ((price - tp) / price) * 100
                            loss = ((sl - price) / price) * 100
                        
                        print(f"   üéØ Take Profit: ${tp:,.4f} (+{profit:.2f}%)")
                        print(f"   üõ° Stop Loss: ${sl:,.4f} (-{loss:.2f}%)")
                        print(f"   ‚öñÔ∏è Risk/Reward: 1:{(profit/loss):.1f}")
                    print(f"   üì± Telegram bildirimi g√∂nderilecek!")
                else:
                    if probability < threshold:
                        print(f"   ‚ùå Threshold altƒ±nda ({probability:.2f}% < {threshold}%)")
                    else:
                        print(f"   ‚ö†Ô∏è  Sinyal yok (d√º≈ü√ºk volatilite)")
                
                print("")
                
            except Exception as e:
                print(f"   ‚ùå Hata: {e}\n")
    
    print("-"*60)
    print("\n‚úÖ Analiz tamamlandƒ±!\n")

if __name__ == "__main__":
    asyncio.run(test_analysis())
